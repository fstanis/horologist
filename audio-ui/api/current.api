// Signature format: 4.0
package com.google.android.horologist.audio.ui {

  @Deprecated public final class BluetoothSettings {
    method @Deprecated public void launchBluetoothSettings(android.content.Context, optional boolean closeOnConnect);
    field @Deprecated public static final com.google.android.horologist.audio.ui.BluetoothSettings INSTANCE;
  }

  @kotlin.RequiresOptIn(message="Horologist Audio UI is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalHorologistAudioUiApi {
  }

  public final class RotaryVolumeConfigDefaults {
    field public static final float DEFAULT_VOLUME_FRACTION_PER_PIXEL = 0.001f;
    field public static final com.google.android.horologist.audio.ui.RotaryVolumeConfigDefaults INSTANCE;
  }

  public final class RotaryVolumeControlsKt {
    method @com.google.android.horologist.compose.navscaffold.ExperimentalHorologistComposeLayoutApi public static androidx.compose.ui.Modifier rotaryVolumeControls(androidx.compose.ui.Modifier, androidx.compose.ui.focus.FocusRequester focusRequester, optional float volumeFractionPerPixel, kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onRotaryVolumeInput);
  }

  public final class VolumePositionIndicatorKt {
    method @androidx.compose.runtime.Composable public static void VolumePositionIndicator(float volume, optional androidx.compose.ui.Modifier modifier, optional boolean autoHide);
  }

  public final class VolumeScreenDefaults {
    method @androidx.compose.runtime.Composable public void DecreaseIcon();
    method @androidx.compose.runtime.Composable public void IncreaseIcon();
    field public static final com.google.android.horologist.audio.ui.VolumeScreenDefaults INSTANCE;
  }

  public final class VolumeScreenKt {
    method @androidx.compose.runtime.Composable @com.google.android.horologist.audio.ui.ExperimentalHorologistAudioUiApi public static void VolumeScreen(optional androidx.compose.ui.Modifier modifier, optional com.google.android.horologist.audio.ui.state.VolumeViewModel volumeViewModel, optional boolean showVolumeIndicator, optional kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon);
    method @androidx.compose.runtime.Composable public static void VolumeScreen(com.google.android.horologist.audio.ui.state.model.VolumeUiState volumeUiState, com.google.android.horologist.audio.ui.components.AudioOutputUi audioOutputUi, kotlin.jvm.functions.Function0<kotlin.Unit> increaseVolume, kotlin.jvm.functions.Function0<kotlin.Unit> decreaseVolume, kotlin.jvm.functions.Function0<kotlin.Unit> onAudioOutputClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon, optional boolean showVolumeIndicator);
    method @androidx.compose.runtime.Composable public static void VolumeWithLabelScreen(com.google.android.horologist.audio.ui.state.model.VolumeUiState volumeUiState, kotlin.jvm.functions.Function0<kotlin.Unit> increaseVolume, kotlin.jvm.functions.Function0<kotlin.Unit> decreaseVolume, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> increaseIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit> decreaseIcon, optional boolean showVolumeIndicator);
  }

  @Deprecated public final class VolumeScrollableState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor @Deprecated public VolumeScrollableState(com.google.android.horologist.audio.VolumeRepository volumeRepository, android.os.Vibrator vibrator);
    method @Deprecated public float dispatchRawDelta(float delta);
    method @Deprecated public boolean isScrollInProgress();
    method @Deprecated public suspend Object? scroll(androidx.compose.foundation.MutatePriority scrollPriority, kotlin.jvm.functions.Function2<? super androidx.compose.foundation.gestures.ScrollScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public boolean isScrollInProgress;
  }

}

package com.google.android.horologist.audio.ui.components {

  public final class AudioOutputUi {
    ctor public AudioOutputUi(String displayName, androidx.compose.ui.graphics.vector.ImageVector imageVector, boolean isConnected);
    method public String component1();
    method public androidx.compose.ui.graphics.vector.ImageVector component2();
    method public boolean component3();
    method public com.google.android.horologist.audio.ui.components.AudioOutputUi copy(String displayName, androidx.compose.ui.graphics.vector.ImageVector imageVector, boolean isConnected);
    method public String getDisplayName();
    method public androidx.compose.ui.graphics.vector.ImageVector getImageVector();
    method public boolean isConnected();
    property public final String displayName;
    property public final androidx.compose.ui.graphics.vector.ImageVector imageVector;
    property public final boolean isConnected;
  }

  public final class AudioOutputUiKt {
    method @androidx.compose.runtime.Composable public static com.google.android.horologist.audio.ui.components.AudioOutputUi toAudioOutputUi(com.google.android.horologist.audio.AudioOutput);
  }

  public final class DeviceChipKt {
    method @androidx.compose.runtime.Composable public static void DeviceChip(String volumeDescription, String deviceName, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.BoxScope,kotlin.Unit> icon, kotlin.jvm.functions.Function0<kotlin.Unit> onAudioOutputClick, optional androidx.compose.ui.Modifier modifier);
  }

  public final class SettingsButtonsDefaults {
    method @androidx.compose.runtime.Composable public void BrandIcon(@DrawableRes int iconId, optional androidx.compose.ui.Modifier modifier, optional boolean enabled);
    field public static final com.google.android.horologist.audio.ui.components.SettingsButtonsDefaults INSTANCE;
  }

  public final class SettingsButtonsKt {
    method @androidx.compose.runtime.Composable public static void SettingsButtons(com.google.android.horologist.audio.ui.state.model.VolumeUiState volumeUiState, kotlin.jvm.functions.Function0<kotlin.Unit> onVolumeClick, kotlin.jvm.functions.Function0<kotlin.Unit> onOutputClick, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> brandIcon, optional boolean enabled);
  }

}

package com.google.android.horologist.audio.ui.components.actions {

  public final class AudioOutputButtonKt {
    method @androidx.compose.runtime.Composable public static void AudioOutputButton(kotlin.jvm.functions.Function0<kotlin.Unit> onOutputClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled);
  }

  public final class SetVolumeButtonKt {
    method @androidx.compose.runtime.Composable public static void SetVolumeButton(kotlin.jvm.functions.Function0<kotlin.Unit> onVolumeClick, com.google.android.horologist.audio.ui.state.model.VolumeUiState volumeUiState, optional androidx.compose.ui.Modifier modifier, optional boolean enabled);
  }

  public final class SettingsButtonKt {
    method @androidx.compose.runtime.Composable public static void SettingsButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector imageVector, String contentDescription, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional float iconSize, optional float tapTargetSize);
  }

}

package com.google.android.horologist.audio.ui.components.animated {

  public final class AnimatedSetVolumeButtonKt {
    method @androidx.compose.runtime.Composable public static void AnimatedSetVolumeButton(kotlin.jvm.functions.Function0<kotlin.Unit> onVolumeClick, com.google.android.horologist.audio.ui.state.model.VolumeUiState volumeUiState, optional androidx.compose.ui.Modifier modifier);
  }

  public final class InteractivePreviewAwareKt {
    method @androidx.compose.runtime.Composable public static void InteractivePreviewAware(kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalInteractivePreview();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> getLocalStaticPreview();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalInteractivePreview;
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<java.lang.Boolean> LocalStaticPreview;
  }

}

package com.google.android.horologist.audio.ui.semantics {

  @com.google.android.horologist.audio.ui.ExperimentalHorologistAudioUiApi public final class CustomSemanticsProperties {
    method public androidx.compose.ui.graphics.vector.ImageVector getIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver);
    method public androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> getIconImageVectorKey();
    method public void setIconImageVector(androidx.compose.ui.semantics.SemanticsPropertyReceiver, androidx.compose.ui.graphics.vector.ImageVector);
    property public final androidx.compose.ui.semantics.SemanticsPropertyKey<androidx.compose.ui.graphics.vector.ImageVector> IconImageVectorKey;
    field public static final com.google.android.horologist.audio.ui.semantics.CustomSemanticsProperties INSTANCE;
  }

}

package com.google.android.horologist.audio.ui.state {

  public final class SystemAudioRepository implements com.google.android.horologist.audio.AudioOutputRepository com.google.android.horologist.audio.VolumeRepository {
    ctor public SystemAudioRepository(android.content.Context application, androidx.mediarouter.media.MediaRouter mediaRouter, optional androidx.mediarouter.media.MediaRouteSelector selector);
    method public void close();
    method public void decreaseVolume();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> getAudioOutput();
    method public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.audio.AudioOutput>> getAvailable();
    method public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.VolumeState> getVolumeState();
    method public void increaseVolume();
    method public void launchOutputSelection(boolean closeOnConnect);
    method public void launchOutputSelection();
    method public void setMuted(boolean muted);
    method public void setVolume(int volume);
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> audioOutput;
    property public kotlinx.coroutines.flow.StateFlow<java.util.List<com.google.android.horologist.audio.AudioOutput>> available;
    property public kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.VolumeState> volumeState;
    field public static final com.google.android.horologist.audio.ui.state.SystemAudioRepository.Companion Companion;
  }

  public static final class SystemAudioRepository.Companion {
    method public com.google.android.horologist.audio.ui.state.SystemAudioRepository fromContext(android.content.Context application);
  }

  public final class SystemAudioRepositoryKt {
  }

  public final class VolumeStateHolder {
    ctor public VolumeStateHolder(com.google.android.horologist.audio.VolumeRepository repository, optional float volumeStepPercent);
    method public void changeVolume(float percentDelta);
    method public void decreaseVolume();
    method public kotlinx.coroutines.flow.Flow<com.google.android.horologist.audio.ui.state.model.VolumeUiState> getVolumeUiStateFlow();
    method public void increaseVolume();
    property public final kotlinx.coroutines.flow.Flow<com.google.android.horologist.audio.ui.state.model.VolumeUiState> volumeUiStateFlow;
  }

  @com.google.android.horologist.audio.ui.ExperimentalHorologistAudioUiApi public class VolumeViewModel extends androidx.lifecycle.ViewModel {
    ctor public VolumeViewModel(com.google.android.horologist.audio.VolumeRepository volumeRepository, com.google.android.horologist.audio.AudioOutputRepository audioOutputRepository, optional kotlin.jvm.functions.Function0<kotlin.Unit> onCleared, android.os.Vibrator vibrator);
    method public final void changeVolume(float delta);
    method public final void changeVolumeWithHaptics(float percentDelta);
    method public final void decreaseVolume();
    method public final void decreaseVolumeWithHaptics();
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> getAudioOutput();
    method public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.ui.state.model.VolumeUiState> getVolumeUiState();
    method public final void increaseVolume();
    method public final void increaseVolumeWithHaptics();
    method public final void launchOutputSelection();
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.AudioOutput> audioOutput;
    property public final kotlinx.coroutines.flow.StateFlow<com.google.android.horologist.audio.ui.state.model.VolumeUiState> volumeUiState;
    field public static final com.google.android.horologist.audio.ui.state.VolumeViewModel.Companion Companion;
  }

  @com.google.android.horologist.audio.ui.ExperimentalHorologistAudioUiApi public static final class VolumeViewModel.Companion {
    method public androidx.lifecycle.ViewModelProvider.Factory getFactory();
    property public final androidx.lifecycle.ViewModelProvider.Factory Factory;
  }

}

package com.google.android.horologist.audio.ui.state.mapper {

  public final class VolumeUiStateMapper {
    method public com.google.android.horologist.audio.ui.state.model.VolumeUiState map(com.google.android.horologist.audio.VolumeState volumeState);
    field public static final com.google.android.horologist.audio.ui.state.mapper.VolumeUiStateMapper INSTANCE;
  }

}

package com.google.android.horologist.audio.ui.state.model {

  public final class VolumeUiState {
    ctor public VolumeUiState(Float? current, optional boolean isMuted, optional boolean adjustable);
    method public Float? component1();
    method public boolean component2();
    method public boolean component3();
    method public com.google.android.horologist.audio.ui.state.model.VolumeUiState copy(Float? current, boolean isMuted, boolean adjustable);
    method public boolean getAdjustable();
    method public Float? getCurrent();
    method public boolean isMax();
    method public boolean isMin();
    method public boolean isMuted();
    property public final boolean adjustable;
    property public final Float? current;
    property public final boolean isMax;
    property public final boolean isMin;
    property public final boolean isMuted;
  }

}

